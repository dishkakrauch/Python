{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pylab as plt\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import sklearn\n",
    "from sklearn import *\n",
    "\n",
    "import tensorflow.compat.v1 as tf\n",
    "tf.disable_v2_behavior()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = tf.Variable(3, name='x')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = tf.Variable(4, name='y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = x*x*y + y + 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor 'add_1:0' shape=() dtype=int32>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<bound method BaseSession.close of <tensorflow.python.client.session.Session object at 0x000002597CEAFE08>>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sess = tf.Session()\n",
    "sess.run(x.initializer)\n",
    "sess.run(y.initializer)\n",
    "result = sess.run(f)\n",
    "print(result)\n",
    "sess.close"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.Session() as sess:\n",
    "    x.initializer.run()\n",
    "    y.initializer.run()\n",
    "    result = f.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42\n"
     ]
    }
   ],
   "source": [
    "init = tf.global_variables_initializer()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    result = f.eval()\n",
    "    print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = tf.Variable(1)\n",
    "x1.graph is tf.get_default_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = tf.Graph()\n",
    "\n",
    "with graph.as_default():\n",
    "    x2 = tf.Variable(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x2.graph is graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x2 is tf.get_default_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1.graph is tf.get_default_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "w = tf.constant(3)\n",
    "x = w + 2\n",
    "y = x + 5\n",
    "z = x * 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "15\n"
     ]
    }
   ],
   "source": [
    "with tf.Session() as sess:\n",
    "    print(y.eval())\n",
    "    print(z.eval())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "15\n"
     ]
    }
   ],
   "source": [
    "with tf.Session() as sess:\n",
    "    y_val, z_val = sess.run([y, z])\n",
    "    print(y_val)\n",
    "    print(z_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = sklearn.preprocessing.StandardScaler()\n",
    "X_train = sklearn.datasets.make_regression()\n",
    "X_ = X_train[0]\n",
    "y_ = X_train[1]\n",
    "X_ = scaler.fit_transform(X_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "now = datetime.utcnow().strftime('%Y%m%d%H%M%S')\n",
    "root_logdir = 'tf_logs'\n",
    "logdir = '{}/run-{}/'.format(root_logdir, now)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Эпоха 0 MSE= 29451.383\n",
      "Эпоха 100 MSE= 14314.043\n",
      "Эпоха 200 MSE= 8124.212\n",
      "Эпоха 300 MSE= 5264.3413\n",
      "Эпоха 400 MSE= 3786.479\n",
      "Эпоха 500 MSE= 2944.7776\n",
      "Эпоха 600 MSE= 2424.7905\n",
      "Эпоха 700 MSE= 2081.5432\n",
      "Эпоха 800 MSE= 1842.5586\n",
      "Эпоха 900 MSE= 1668.889\n"
     ]
    }
   ],
   "source": [
    "#%%time\n",
    "#reset_graph()\n",
    "\n",
    "n_epochs = 1000\n",
    "learning_rate = .001\n",
    "\n",
    "m, n = X_.shape\n",
    "\n",
    "X = tf.constant(X_, dtype=tf.float32, name='X')\n",
    "y = tf.constant(y_.reshape(-1, 1), dtype=tf.float32, name='y')\n",
    "theta = tf.Variable(tf.random_uniform([n, 1], -1., 1.), name='theta')\n",
    "y_pred = tf.matmul(X, theta, name='predictions')\n",
    "\n",
    "with tf.name_scope('loss') as scope:\n",
    "    error = y_pred - y\n",
    "    mse = tf.reduce_mean(tf.square(error), name='mse')\n",
    "#gradients = 2/m * tf.matmul(tf.transpose(X), error)\n",
    "#gradients = tf.gradients(mse, [theta])[0]\n",
    "optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n",
    "#optimizer = tf.train.MomentumOptimizer(learning_rate=learning_rate, momentum=.9)\n",
    "#training_op = tf.assign(theta, theta - learning_rate * gradients)\n",
    "training_op = optimizer.minimize(mse)\n",
    "mse_summary = tf.summary.scalar('MSE', mse)\n",
    "file_writer = tf.summary.FileWriter(logdir, tf.get_default_graph())\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "saver = tf.train.Saver()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "    \n",
    "    for epoch in range(n_epochs):\n",
    "        if epoch % 100 == 0:\n",
    "            print('Эпоха', epoch, 'MSE=', mse.eval())\n",
    "            summary_str = mse_summary.eval()\n",
    "            file_writer.add_summary(summary_str, epoch)\n",
    "        sess.run(training_op)\n",
    "    \n",
    "    best_theta = theta.eval()\n",
    "    save_path = saver.save(sess, 'my_model_final.ckpt')\n",
    "    \n",
    "file_writer.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "mnist = pd.concat([pd.read_csv(r'mnist_train.csv'), pd.read_csv(r'mnist_test.csv')])\n",
    "\n",
    "mnist[mnist.columns[1:]] = mnist[mnist.columns[1:]]/255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_inputs = 28*28\n",
    "height = 28\n",
    "weight = 28\n",
    "channels = 1\n",
    "conv_fmaps = 2\n",
    "n_hidden1 = 98\n",
    "n_hidden2 = 46\n",
    "n_outputs = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "X = tf.placeholder(tf.float32, shape=(None, n_inputs), name='X')\n",
    "training = tf.placeholder_with_default(True, shape=(), name='training')\n",
    "y = tf.placeholder(tf.int64, shape=(None), name='y')\n",
    "\n",
    "dropout_rate = .0\n",
    "X_drop = tf.layers.dropout(X, dropout_rate, training=training)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "def neuron_layer(X, n_neurons, name, activation=None):\n",
    "    with tf.name_scope(name):\n",
    "        n_inputs = int(X.get_shape()[1])\n",
    "        stddev = 2 / np.sqrt(n_inputs + n_neurons)\n",
    "        init = tf.truncated_normal((n_inputs, n_neurons), stddev=stddev)\n",
    "        W = tf.Variable(init, name='kernel')\n",
    "        b = tf.Variable(tf.zeros([n_neurons]), name='bias')\n",
    "        Z = tf.matmul(X, W) + b\n",
    "        if activation is not None:\n",
    "            return activation(Z)\n",
    "        else:\n",
    "            return Z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "with tf.name_scope('dnn'):\n",
    "    hidden1 = neuron_layer(X, n_hidden1, name='hidden1', activation=tf.nn.relu)\n",
    "    hidden2 = neuron_layer(hidden1, n_hidden2, name='hidden2', activation=tf.nn.relu)\n",
    "    logits = neuron_layer(hidden2, n_outputs, name='outputs')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "with tf.name_scope('dnn'):\n",
    "    he_init = tf.variance_scaling_initializer()\n",
    "    hidden1 = tf.layers.dense(X, n_hidden1, name='hidden1', activation=tf.nn.leaky_relu, kernel_initializer=he_init)\n",
    "    hidden2 = tf.layers.dense(hidden1, n_hidden2, name='hidden2', activation=tf.nn.leaky_relu)\n",
    "    logits = tf.layers.dense(hidden2, n_outputs, name='outputs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "from functools import partial"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "with tf.name_scope('dnn'):\n",
    "    hidden1 = tf.layers.dense(X, n_hidden1, name='hidden1')\n",
    "    bn1 = tf.layers.batch_normalization(hidden1, training=training, momentum=.9)\n",
    "    bn1_act = tf.nn.elu(bn1)\n",
    "    \n",
    "    hidden2 = tf.layers.dense(bn1_act, n_hidden2, name='hidden2')\n",
    "    bn2 = tf.layers.batch_normalization(hidden2, training=training, momentum=.9)\n",
    "    bn2_act = tf.nn.elu(bn2)\n",
    "    \n",
    "    logits_before_bn = tf.layers.dense(bn2_act, n_outputs, name='outputs')\n",
    "    logits = tf.layers.batch_normalization(logits_before_bn, training=training, momentum=.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "with tf.name_scope('dnn'):\n",
    "\n",
    "    my_batch_norm_layer = partial(tf.layers.batch_normalization, training=training, momentum=.9)\n",
    "    my_activation_function = partial(tf.nn.elu)\n",
    "\n",
    "    hidden1 = tf.layers.dense(X_drop, n_hidden1, name='hidden1', kernel_regularizer=tf.keras.regularizers.l1_l2(l1=.001, l2=.001))\n",
    "    bn1 = my_batch_norm_layer(hidden1)\n",
    "    bn1_act = my_activation_function(bn1)\n",
    "    hidden1_drop = tf.layers.dropout(bn1_act, dropout_rate, training=training)\n",
    "\n",
    "    hidden2 = tf.layers.dense(hidden1_drop, n_hidden2, name='hidden2', kernel_regularizer=tf.keras.regularizers.l1_l2(l1=.001, l2=.001))\n",
    "    bn2 = my_batch_norm_layer(hidden2)\n",
    "    bn2_act = my_activation_function(bn2)\n",
    "    hidden2_drop = tf.layers.dropout(bn2_act, dropout_rate, training=training)\n",
    "\n",
    "    logits_before_bn = tf.layers.dense(bn2_act, n_outputs, name='outputs')\n",
    "    logits = my_batch_norm_layer(logits_before_bn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.name_scope('loss'):\n",
    "    xentropy = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y, logits=logits)\n",
    "    base_losses = tf.reduce_mean(xentropy, name='loss')\n",
    "    reg_losses = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)\n",
    "    loss = tf.add_n([base_losses] + reg_losses, name='loss')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "learning_rate = .01\n",
    "initial_learning_rate = .1\n",
    "decay_steps = 10000\n",
    "decay_rate = 1/10\n",
    "global_step = tf.Variable(0, trainable=False, name='global_step')\n",
    "learning_rate = tf.train.exponential_decay(initial_learning_rate, global_step, decay_steps, decay_rate)\n",
    "\n",
    "with tf.name_scope('train'):\n",
    "    #optimizer = tf.train.GradientDescentOptimizer(learning_rate)\n",
    "    optimizer = tf.train.MomentumOptimizer(learning_rate=learning_rate, use_nesterov=True, momentum=.9)\n",
    "    training_op = optimizer.minimize(loss, global_step=global_step)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "with tf.name_scope('eval'):\n",
    "    correct = tf.nn.in_top_k(logits, y, 1)\n",
    "    accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "init = tf.global_variables_initializer()\n",
    "saver = tf.train.Saver()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_index = np.random.permutation(55000)\n",
    "valid_index = np.random.permutation(5000)\n",
    "test_index = np.random.permutation(10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "mnist_train = mnist.iloc[train_index].reset_index(drop=True)\n",
    "mnist_valid = mnist.iloc[valid_index].reset_index(drop=True)\n",
    "mnist_test = mnist.iloc[test_index].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shuffle_batch(X, y, batch_size):\n",
    "    rnd_idx = np.random.permutation(len(X))\n",
    "    n_batches = len(X) // batch_size\n",
    "    for batch_idx in np.array_split(rnd_idx, n_batches):\n",
    "        X_batch, y_batch = X[batch_idx], y[batch_idx]\n",
    "        yield X_batch, y_batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = mnist_train[mnist_train.columns[1:]].to_numpy()\n",
    "y_train = mnist_train['label'].to_numpy()\n",
    "\n",
    "X_valid = mnist_valid[mnist_valid.columns[1:]].to_numpy()\n",
    "y_valid = mnist_valid['label'].to_numpy()\n",
    "\n",
    "X_test = mnist_test[mnist_test.columns[1:]].to_numpy()\n",
    "y_test = mnist_test['label'].to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 Batch accuracy: 0.9 Val accuracy: 0.9216\n",
      "1 Batch accuracy: 0.94 Val accuracy: 0.9348\n",
      "2 Batch accuracy: 0.92 Val accuracy: 0.9278\n",
      "3 Batch accuracy: 0.96 Val accuracy: 0.944\n",
      "4 Batch accuracy: 1.0 Val accuracy: 0.9452\n",
      "5 Batch accuracy: 0.94 Val accuracy: 0.953\n",
      "6 Batch accuracy: 0.98 Val accuracy: 0.9508\n",
      "7 Batch accuracy: 0.94 Val accuracy: 0.9546\n",
      "8 Batch accuracy: 0.92 Val accuracy: 0.9602\n",
      "9 Batch accuracy: 1.0 Val accuracy: 0.961\n",
      "10 Batch accuracy: 0.98 Val accuracy: 0.965\n",
      "11 Batch accuracy: 0.96 Val accuracy: 0.964\n",
      "12 Batch accuracy: 0.9 Val accuracy: 0.9654\n",
      "13 Batch accuracy: 0.98 Val accuracy: 0.968\n",
      "14 Batch accuracy: 0.98 Val accuracy: 0.9698\n",
      "15 Batch accuracy: 1.0 Val accuracy: 0.9706\n",
      "16 Batch accuracy: 0.96 Val accuracy: 0.9708\n",
      "17 Batch accuracy: 0.98 Val accuracy: 0.9718\n",
      "18 Batch accuracy: 0.96 Val accuracy: 0.9746\n",
      "19 Batch accuracy: 0.94 Val accuracy: 0.9784\n"
     ]
    }
   ],
   "source": [
    "n_epochs = 20\n",
    "batch_size = 50\n",
    "#ind = 0\n",
    "\n",
    "file_writer = tf.summary.FileWriter(logdir, tf.get_default_graph())\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "saver = tf.train.Saver()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    for epoch in range(n_epochs):\n",
    "        for X_batch, y_batch in shuffle_batch(X_train, y_train, batch_size):\n",
    "            sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n",
    "        acc_batch = accuracy.eval(feed_dict={X: X_batch, y: y_batch})\n",
    "        acc_val = accuracy.eval(feed_dict={X: X_valid, y: y_valid})\n",
    "        print(epoch, \"Batch accuracy:\", acc_batch, \"Val accuracy:\", acc_val)\n",
    "        #ind += batch_size\n",
    "        \n",
    "    save_path = saver.save(sess, 'tf_logs\\my_model_final.ckpt')\n",
    "    \n",
    "file_writer.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X\n",
      "training/input\n",
      "training\n",
      "y\n",
      "hidden1/kernel/Initializer/random_uniform/shape\n",
      "hidden1/kernel/Initializer/random_uniform/min\n",
      "hidden1/kernel/Initializer/random_uniform/max\n",
      "hidden1/kernel/Initializer/random_uniform/RandomUniform\n",
      "hidden1/kernel/Initializer/random_uniform/sub\n",
      "hidden1/kernel/Initializer/random_uniform/mul\n",
      "hidden1/kernel/Initializer/random_uniform\n",
      "hidden1/kernel\n",
      "hidden1/kernel/Assign\n",
      "hidden1/kernel/read\n",
      "hidden1/bias/Initializer/zeros\n",
      "hidden1/bias\n",
      "hidden1/bias/Assign\n",
      "hidden1/bias/read\n",
      "dnn/hidden1/MatMul\n",
      "dnn/hidden1/BiasAdd\n",
      "batch_normalization/gamma/Initializer/ones\n",
      "batch_normalization/gamma\n",
      "batch_normalization/gamma/Assign\n",
      "batch_normalization/gamma/read\n",
      "batch_normalization/beta/Initializer/zeros\n",
      "batch_normalization/beta\n",
      "batch_normalization/beta/Assign\n",
      "batch_normalization/beta/read\n",
      "batch_normalization/moving_mean/Initializer/zeros\n",
      "batch_normalization/moving_mean\n",
      "batch_normalization/moving_mean/Assign\n",
      "batch_normalization/moving_mean/read\n",
      "batch_normalization/moving_variance/Initializer/ones\n",
      "batch_normalization/moving_variance\n",
      "batch_normalization/moving_variance/Assign\n",
      "batch_normalization/moving_variance/read\n",
      "dnn/batch_normalization/moments/mean/reduction_indices\n",
      "dnn/batch_normalization/moments/mean\n",
      "dnn/batch_normalization/moments/StopGradient\n",
      "dnn/batch_normalization/moments/SquaredDifference\n",
      "dnn/batch_normalization/moments/variance/reduction_indices\n",
      "dnn/batch_normalization/moments/variance\n",
      "dnn/batch_normalization/moments/Squeeze\n",
      "dnn/batch_normalization/moments/Squeeze_1\n",
      "dnn/batch_normalization/cond/Switch\n",
      "dnn/batch_normalization/cond/switch_t\n",
      "dnn/batch_normalization/cond/switch_f\n",
      "dnn/batch_normalization/cond/pred_id\n",
      "dnn/batch_normalization/cond/Switch_1\n",
      "dnn/batch_normalization/cond/Switch_2\n",
      "dnn/batch_normalization/cond/Merge\n",
      "dnn/batch_normalization/cond_1/Switch\n",
      "dnn/batch_normalization/cond_1/switch_t\n",
      "dnn/batch_normalization/cond_1/switch_f\n",
      "dnn/batch_normalization/cond_1/pred_id\n",
      "dnn/batch_normalization/cond_1/Switch_1\n",
      "dnn/batch_normalization/cond_1/Switch_2\n",
      "dnn/batch_normalization/cond_1/Merge\n",
      "dnn/batch_normalization/cond_2/Switch\n",
      "dnn/batch_normalization/cond_2/switch_t\n",
      "dnn/batch_normalization/cond_2/switch_f\n",
      "dnn/batch_normalization/cond_2/pred_id\n",
      "dnn/batch_normalization/cond_2/AssignMovingAvg/decay\n",
      "dnn/batch_normalization/cond_2/AssignMovingAvg/sub\n",
      "dnn/batch_normalization/cond_2/AssignMovingAvg/sub/Switch\n",
      "dnn/batch_normalization/cond_2/AssignMovingAvg/sub/Switch_1\n",
      "dnn/batch_normalization/cond_2/AssignMovingAvg/mul\n",
      "dnn/batch_normalization/cond_2/AssignMovingAvg\n",
      "dnn/batch_normalization/cond_2/AssignMovingAvg/Switch\n",
      "dnn/batch_normalization/cond_2/Switch_1\n",
      "dnn/batch_normalization/cond_2/Merge\n",
      "dnn/batch_normalization/cond_3/Switch\n",
      "dnn/batch_normalization/cond_3/switch_t\n",
      "dnn/batch_normalization/cond_3/switch_f\n",
      "dnn/batch_normalization/cond_3/pred_id\n",
      "dnn/batch_normalization/cond_3/AssignMovingAvg/decay\n",
      "dnn/batch_normalization/cond_3/AssignMovingAvg/sub\n",
      "dnn/batch_normalization/cond_3/AssignMovingAvg/sub/Switch\n",
      "dnn/batch_normalization/cond_3/AssignMovingAvg/sub/Switch_1\n",
      "dnn/batch_normalization/cond_3/AssignMovingAvg/mul\n",
      "dnn/batch_normalization/cond_3/AssignMovingAvg\n",
      "dnn/batch_normalization/cond_3/AssignMovingAvg/Switch\n",
      "dnn/batch_normalization/cond_3/Switch_1\n",
      "dnn/batch_normalization/cond_3/Merge\n",
      "dnn/batch_normalization/batchnorm/add/y\n",
      "dnn/batch_normalization/batchnorm/add\n",
      "dnn/batch_normalization/batchnorm/Rsqrt\n",
      "dnn/batch_normalization/batchnorm/mul\n",
      "dnn/batch_normalization/batchnorm/mul_1\n",
      "dnn/batch_normalization/batchnorm/mul_2\n",
      "dnn/batch_normalization/batchnorm/sub\n",
      "dnn/batch_normalization/batchnorm/add_1\n",
      "dnn/Elu\n",
      "hidden2/kernel/Initializer/random_uniform/shape\n",
      "hidden2/kernel/Initializer/random_uniform/min\n",
      "hidden2/kernel/Initializer/random_uniform/max\n",
      "hidden2/kernel/Initializer/random_uniform/RandomUniform\n",
      "hidden2/kernel/Initializer/random_uniform/sub\n",
      "hidden2/kernel/Initializer/random_uniform/mul\n",
      "hidden2/kernel/Initializer/random_uniform\n",
      "hidden2/kernel\n",
      "hidden2/kernel/Assign\n",
      "hidden2/kernel/read\n",
      "hidden2/bias/Initializer/zeros\n",
      "hidden2/bias\n",
      "hidden2/bias/Assign\n",
      "hidden2/bias/read\n",
      "dnn/hidden2/MatMul\n",
      "dnn/hidden2/BiasAdd\n",
      "batch_normalization_1/gamma/Initializer/ones\n",
      "batch_normalization_1/gamma\n",
      "batch_normalization_1/gamma/Assign\n",
      "batch_normalization_1/gamma/read\n",
      "batch_normalization_1/beta/Initializer/zeros\n",
      "batch_normalization_1/beta\n",
      "batch_normalization_1/beta/Assign\n",
      "batch_normalization_1/beta/read\n",
      "batch_normalization_1/moving_mean/Initializer/zeros\n",
      "batch_normalization_1/moving_mean\n",
      "batch_normalization_1/moving_mean/Assign\n",
      "batch_normalization_1/moving_mean/read\n",
      "batch_normalization_1/moving_variance/Initializer/ones\n",
      "batch_normalization_1/moving_variance\n",
      "batch_normalization_1/moving_variance/Assign\n",
      "batch_normalization_1/moving_variance/read\n",
      "dnn/batch_normalization_1/moments/mean/reduction_indices\n",
      "dnn/batch_normalization_1/moments/mean\n",
      "dnn/batch_normalization_1/moments/StopGradient\n",
      "dnn/batch_normalization_1/moments/SquaredDifference\n",
      "dnn/batch_normalization_1/moments/variance/reduction_indices\n",
      "dnn/batch_normalization_1/moments/variance\n",
      "dnn/batch_normalization_1/moments/Squeeze\n",
      "dnn/batch_normalization_1/moments/Squeeze_1\n",
      "dnn/batch_normalization_1/cond/Switch\n",
      "dnn/batch_normalization_1/cond/switch_t\n",
      "dnn/batch_normalization_1/cond/switch_f\n",
      "dnn/batch_normalization_1/cond/pred_id\n",
      "dnn/batch_normalization_1/cond/Switch_1\n",
      "dnn/batch_normalization_1/cond/Switch_2\n",
      "dnn/batch_normalization_1/cond/Merge\n",
      "dnn/batch_normalization_1/cond_1/Switch\n",
      "dnn/batch_normalization_1/cond_1/switch_t\n",
      "dnn/batch_normalization_1/cond_1/switch_f\n",
      "dnn/batch_normalization_1/cond_1/pred_id\n",
      "dnn/batch_normalization_1/cond_1/Switch_1\n",
      "dnn/batch_normalization_1/cond_1/Switch_2\n",
      "dnn/batch_normalization_1/cond_1/Merge\n",
      "dnn/batch_normalization_1/cond_2/Switch\n",
      "dnn/batch_normalization_1/cond_2/switch_t\n",
      "dnn/batch_normalization_1/cond_2/switch_f\n",
      "dnn/batch_normalization_1/cond_2/pred_id\n",
      "dnn/batch_normalization_1/cond_2/AssignMovingAvg/decay\n",
      "dnn/batch_normalization_1/cond_2/AssignMovingAvg/sub\n",
      "dnn/batch_normalization_1/cond_2/AssignMovingAvg/sub/Switch\n",
      "dnn/batch_normalization_1/cond_2/AssignMovingAvg/sub/Switch_1\n",
      "dnn/batch_normalization_1/cond_2/AssignMovingAvg/mul\n",
      "dnn/batch_normalization_1/cond_2/AssignMovingAvg\n",
      "dnn/batch_normalization_1/cond_2/AssignMovingAvg/Switch\n",
      "dnn/batch_normalization_1/cond_2/Switch_1\n",
      "dnn/batch_normalization_1/cond_2/Merge\n",
      "dnn/batch_normalization_1/cond_3/Switch\n",
      "dnn/batch_normalization_1/cond_3/switch_t\n",
      "dnn/batch_normalization_1/cond_3/switch_f\n",
      "dnn/batch_normalization_1/cond_3/pred_id\n",
      "dnn/batch_normalization_1/cond_3/AssignMovingAvg/decay\n",
      "dnn/batch_normalization_1/cond_3/AssignMovingAvg/sub\n",
      "dnn/batch_normalization_1/cond_3/AssignMovingAvg/sub/Switch\n",
      "dnn/batch_normalization_1/cond_3/AssignMovingAvg/sub/Switch_1\n",
      "dnn/batch_normalization_1/cond_3/AssignMovingAvg/mul\n",
      "dnn/batch_normalization_1/cond_3/AssignMovingAvg\n",
      "dnn/batch_normalization_1/cond_3/AssignMovingAvg/Switch\n",
      "dnn/batch_normalization_1/cond_3/Switch_1\n",
      "dnn/batch_normalization_1/cond_3/Merge\n",
      "dnn/batch_normalization_1/batchnorm/add/y\n",
      "dnn/batch_normalization_1/batchnorm/add\n",
      "dnn/batch_normalization_1/batchnorm/Rsqrt\n",
      "dnn/batch_normalization_1/batchnorm/mul\n",
      "dnn/batch_normalization_1/batchnorm/mul_1\n",
      "dnn/batch_normalization_1/batchnorm/mul_2\n",
      "dnn/batch_normalization_1/batchnorm/sub\n",
      "dnn/batch_normalization_1/batchnorm/add_1\n",
      "dnn/Elu_1\n",
      "outputs/kernel/Initializer/random_uniform/shape\n",
      "outputs/kernel/Initializer/random_uniform/min\n",
      "outputs/kernel/Initializer/random_uniform/max\n",
      "outputs/kernel/Initializer/random_uniform/RandomUniform\n",
      "outputs/kernel/Initializer/random_uniform/sub\n",
      "outputs/kernel/Initializer/random_uniform/mul\n",
      "outputs/kernel/Initializer/random_uniform\n",
      "outputs/kernel\n",
      "outputs/kernel/Assign\n",
      "outputs/kernel/read\n",
      "outputs/bias/Initializer/zeros\n",
      "outputs/bias\n",
      "outputs/bias/Assign\n",
      "outputs/bias/read\n",
      "dnn/outputs/MatMul\n",
      "dnn/outputs/BiasAdd\n",
      "batch_normalization_2/gamma/Initializer/ones\n",
      "batch_normalization_2/gamma\n",
      "batch_normalization_2/gamma/Assign\n",
      "batch_normalization_2/gamma/read\n",
      "batch_normalization_2/beta/Initializer/zeros\n",
      "batch_normalization_2/beta\n",
      "batch_normalization_2/beta/Assign\n",
      "batch_normalization_2/beta/read\n",
      "batch_normalization_2/moving_mean/Initializer/zeros\n",
      "batch_normalization_2/moving_mean\n",
      "batch_normalization_2/moving_mean/Assign\n",
      "batch_normalization_2/moving_mean/read\n",
      "batch_normalization_2/moving_variance/Initializer/ones\n",
      "batch_normalization_2/moving_variance\n",
      "batch_normalization_2/moving_variance/Assign\n",
      "batch_normalization_2/moving_variance/read\n",
      "dnn/batch_normalization_2/moments/mean/reduction_indices\n",
      "dnn/batch_normalization_2/moments/mean\n",
      "dnn/batch_normalization_2/moments/StopGradient\n",
      "dnn/batch_normalization_2/moments/SquaredDifference\n",
      "dnn/batch_normalization_2/moments/variance/reduction_indices\n",
      "dnn/batch_normalization_2/moments/variance\n",
      "dnn/batch_normalization_2/moments/Squeeze\n",
      "dnn/batch_normalization_2/moments/Squeeze_1\n",
      "dnn/batch_normalization_2/cond/Switch\n",
      "dnn/batch_normalization_2/cond/switch_t\n",
      "dnn/batch_normalization_2/cond/switch_f\n",
      "dnn/batch_normalization_2/cond/pred_id\n",
      "dnn/batch_normalization_2/cond/Switch_1\n",
      "dnn/batch_normalization_2/cond/Switch_2\n",
      "dnn/batch_normalization_2/cond/Merge\n",
      "dnn/batch_normalization_2/cond_1/Switch\n",
      "dnn/batch_normalization_2/cond_1/switch_t\n",
      "dnn/batch_normalization_2/cond_1/switch_f\n",
      "dnn/batch_normalization_2/cond_1/pred_id\n",
      "dnn/batch_normalization_2/cond_1/Switch_1\n",
      "dnn/batch_normalization_2/cond_1/Switch_2\n",
      "dnn/batch_normalization_2/cond_1/Merge\n",
      "dnn/batch_normalization_2/cond_2/Switch\n",
      "dnn/batch_normalization_2/cond_2/switch_t\n",
      "dnn/batch_normalization_2/cond_2/switch_f\n",
      "dnn/batch_normalization_2/cond_2/pred_id\n",
      "dnn/batch_normalization_2/cond_2/AssignMovingAvg/decay\n",
      "dnn/batch_normalization_2/cond_2/AssignMovingAvg/sub\n",
      "dnn/batch_normalization_2/cond_2/AssignMovingAvg/sub/Switch\n",
      "dnn/batch_normalization_2/cond_2/AssignMovingAvg/sub/Switch_1\n",
      "dnn/batch_normalization_2/cond_2/AssignMovingAvg/mul\n",
      "dnn/batch_normalization_2/cond_2/AssignMovingAvg\n",
      "dnn/batch_normalization_2/cond_2/AssignMovingAvg/Switch\n",
      "dnn/batch_normalization_2/cond_2/Switch_1\n",
      "dnn/batch_normalization_2/cond_2/Merge\n",
      "dnn/batch_normalization_2/cond_3/Switch\n",
      "dnn/batch_normalization_2/cond_3/switch_t\n",
      "dnn/batch_normalization_2/cond_3/switch_f\n",
      "dnn/batch_normalization_2/cond_3/pred_id\n",
      "dnn/batch_normalization_2/cond_3/AssignMovingAvg/decay\n",
      "dnn/batch_normalization_2/cond_3/AssignMovingAvg/sub\n",
      "dnn/batch_normalization_2/cond_3/AssignMovingAvg/sub/Switch\n",
      "dnn/batch_normalization_2/cond_3/AssignMovingAvg/sub/Switch_1\n",
      "dnn/batch_normalization_2/cond_3/AssignMovingAvg/mul\n",
      "dnn/batch_normalization_2/cond_3/AssignMovingAvg\n",
      "dnn/batch_normalization_2/cond_3/AssignMovingAvg/Switch\n",
      "dnn/batch_normalization_2/cond_3/Switch_1\n",
      "dnn/batch_normalization_2/cond_3/Merge\n",
      "dnn/batch_normalization_2/batchnorm/add/y\n",
      "dnn/batch_normalization_2/batchnorm/add\n",
      "dnn/batch_normalization_2/batchnorm/Rsqrt\n",
      "dnn/batch_normalization_2/batchnorm/mul\n",
      "dnn/batch_normalization_2/batchnorm/mul_1\n",
      "dnn/batch_normalization_2/batchnorm/mul_2\n",
      "dnn/batch_normalization_2/batchnorm/sub\n",
      "dnn/batch_normalization_2/batchnorm/add_1\n",
      "loss/SparseSoftmaxCrossEntropyWithLogits/Shape\n",
      "loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits\n",
      "loss/Const\n",
      "loss/loss\n",
      "train/gradients/Shape\n",
      "train/gradients/grad_ys_0\n",
      "train/gradients/Fill\n",
      "train/gradients/loss/loss_grad/Reshape/shape\n",
      "train/gradients/loss/loss_grad/Reshape\n",
      "train/gradients/loss/loss_grad/Shape\n",
      "train/gradients/loss/loss_grad/Tile\n",
      "train/gradients/loss/loss_grad/Shape_1\n",
      "train/gradients/loss/loss_grad/Shape_2\n",
      "train/gradients/loss/loss_grad/Const\n",
      "train/gradients/loss/loss_grad/Prod\n",
      "train/gradients/loss/loss_grad/Const_1\n",
      "train/gradients/loss/loss_grad/Prod_1\n",
      "train/gradients/loss/loss_grad/Maximum/y\n",
      "train/gradients/loss/loss_grad/Maximum\n",
      "train/gradients/loss/loss_grad/floordiv\n",
      "train/gradients/loss/loss_grad/Cast\n",
      "train/gradients/loss/loss_grad/truediv\n",
      "train/gradients/zeros_like\n",
      "train/gradients/loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient\n",
      "train/gradients/loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim\n",
      "train/gradients/loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims\n",
      "train/gradients/loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/Sum\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/Sum_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/Reshape_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/Mul\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/Sum\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/Mul_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/Sum_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/sub_grad/Neg\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_2_grad/Mul\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_2_grad/Mul_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_2/cond/Merge_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization_2/cond/Merge_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_2/cond/Merge_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_2/cond/Merge_grad/tuple/control_dependency_1\n",
      "train/gradients/AddN\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_grad/Mul\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_grad/Mul_1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency_1\n",
      "train/gradients/Switch\n",
      "train/gradients/Identity\n",
      "train/gradients/Shape_1\n",
      "train/gradients/zeros/Const\n",
      "train/gradients/zeros\n",
      "train/gradients/dnn/batch_normalization_2/cond/Switch_1_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/Rsqrt_grad/RsqrtGrad\n",
      "train/gradients/dnn/batch_normalization_2/moments/Squeeze_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_2/moments/Squeeze_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/BroadcastGradientArgs/s0\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/BroadcastGradientArgs/s1\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/Sum/reduction_indices\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/Sum\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/Reshape/shape\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_2/batchnorm/add_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_2/cond_1/Merge_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization_2/cond_1/Merge_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_2/cond_1/Merge_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_2/cond_1/Merge_grad/tuple/control_dependency_1\n",
      "train/gradients/Switch_1\n",
      "train/gradients/Identity_1\n",
      "train/gradients/Shape_2\n",
      "train/gradients/zeros_1/Const\n",
      "train/gradients/zeros_1\n",
      "train/gradients/dnn/batch_normalization_2/cond_1/Switch_1_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization_2/moments/Squeeze_1_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_2/moments/Squeeze_1_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Size\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/add\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/mod\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/range/start\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/range/delta\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/range\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Fill/value\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Fill\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/DynamicStitch\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Maximum/y\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Maximum\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/floordiv\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Tile\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Shape_2\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Shape_3\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Const\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Prod\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Const_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Prod_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Maximum_1/y\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Maximum_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/floordiv_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/Cast\n",
      "train/gradients/dnn/batch_normalization_2/moments/variance_grad/truediv\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/scalar\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/Mul\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/sub\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/mul_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/Sum\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/Sum_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/Reshape_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/Neg\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_2/moments/SquaredDifference_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Size\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/add\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/mod\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/range/start\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/range/delta\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/range\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Fill/value\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Fill\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/DynamicStitch\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Maximum/y\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Maximum\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/floordiv\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Tile\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Shape_2\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Shape_3\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Const\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Prod\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Const_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Prod_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Maximum_1/y\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Maximum_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/floordiv_1\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/Cast\n",
      "train/gradients/dnn/batch_normalization_2/moments/mean_grad/truediv\n",
      "train/gradients/AddN_1\n",
      "train/gradients/dnn/outputs/BiasAdd_grad/BiasAddGrad\n",
      "train/gradients/dnn/outputs/BiasAdd_grad/tuple/group_deps\n",
      "train/gradients/dnn/outputs/BiasAdd_grad/tuple/control_dependency\n",
      "train/gradients/dnn/outputs/BiasAdd_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/outputs/MatMul_grad/MatMul\n",
      "train/gradients/dnn/outputs/MatMul_grad/MatMul_1\n",
      "train/gradients/dnn/outputs/MatMul_grad/tuple/group_deps\n",
      "train/gradients/dnn/outputs/MatMul_grad/tuple/control_dependency\n",
      "train/gradients/dnn/outputs/MatMul_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/Elu_1_grad/EluGrad\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/Sum\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/Sum_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/Reshape_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_1_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/Mul\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/Sum\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/Mul_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/Sum_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/Reshape_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_1_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/sub_grad/Neg\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/sub_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/sub_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/sub_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_2_grad/Mul\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_2_grad/Mul_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_2_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_2_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_2_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_1/cond/Merge_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization_1/cond/Merge_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_1/cond/Merge_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_1/cond/Merge_grad/tuple/control_dependency_1\n",
      "train/gradients/AddN_2\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_grad/Mul\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_grad/Mul_1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/mul_grad/tuple/control_dependency_1\n",
      "train/gradients/Switch_2\n",
      "train/gradients/Identity_2\n",
      "train/gradients/Shape_3\n",
      "train/gradients/zeros_2/Const\n",
      "train/gradients/zeros_2\n",
      "train/gradients/dnn/batch_normalization_1/cond/Switch_1_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/Rsqrt_grad/RsqrtGrad\n",
      "train/gradients/dnn/batch_normalization_1/moments/Squeeze_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_1/moments/Squeeze_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/BroadcastGradientArgs/s0\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/BroadcastGradientArgs/s1\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/Sum/reduction_indices\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/Sum\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/Reshape/shape\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_1/batchnorm/add_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_1/cond_1/Merge_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization_1/cond_1/Merge_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_1/cond_1/Merge_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_1/cond_1/Merge_grad/tuple/control_dependency_1\n",
      "train/gradients/Switch_3\n",
      "train/gradients/Identity_3\n",
      "train/gradients/Shape_4\n",
      "train/gradients/zeros_3/Const\n",
      "train/gradients/zeros_3\n",
      "train/gradients/dnn/batch_normalization_1/cond_1/Switch_1_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization_1/moments/Squeeze_1_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_1/moments/Squeeze_1_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Size\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/add\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/mod\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/range/start\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/range/delta\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/range\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Fill/value\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Fill\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/DynamicStitch\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Maximum/y\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Maximum\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/floordiv\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Tile\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Shape_2\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Shape_3\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Const\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Prod\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Const_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Prod_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Maximum_1/y\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Maximum_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/floordiv_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/Cast\n",
      "train/gradients/dnn/batch_normalization_1/moments/variance_grad/truediv\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/scalar\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/Mul\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/sub\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/mul_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/Sum\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/Sum_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/Reshape_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/Neg\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization_1/moments/SquaredDifference_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Shape\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Size\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/add\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/mod\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/range/start\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/range/delta\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/range\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Fill/value\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Fill\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/DynamicStitch\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Maximum/y\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Maximum\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/floordiv\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Tile\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Shape_2\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Shape_3\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Const\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Prod\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Const_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Prod_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Maximum_1/y\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Maximum_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/floordiv_1\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/Cast\n",
      "train/gradients/dnn/batch_normalization_1/moments/mean_grad/truediv\n",
      "train/gradients/AddN_3\n",
      "train/gradients/dnn/hidden2/BiasAdd_grad/BiasAddGrad\n",
      "train/gradients/dnn/hidden2/BiasAdd_grad/tuple/group_deps\n",
      "train/gradients/dnn/hidden2/BiasAdd_grad/tuple/control_dependency\n",
      "train/gradients/dnn/hidden2/BiasAdd_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/hidden2/MatMul_grad/MatMul\n",
      "train/gradients/dnn/hidden2/MatMul_grad/MatMul_1\n",
      "train/gradients/dnn/hidden2/MatMul_grad/tuple/group_deps\n",
      "train/gradients/dnn/hidden2/MatMul_grad/tuple/control_dependency\n",
      "train/gradients/dnn/hidden2/MatMul_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/Elu_grad/EluGrad\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/Shape\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/Sum\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/Sum_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/Reshape_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/Shape\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/Mul\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/Sum\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/Mul_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/Sum_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/Reshape_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/sub_grad/Neg\n",
      "train/gradients/dnn/batch_normalization/batchnorm/sub_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization/batchnorm/sub_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_2_grad/Mul\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_2_grad/Mul_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization/cond/Merge_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization/cond/Merge_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization/cond/Merge_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization/cond/Merge_grad/tuple/control_dependency_1\n",
      "train/gradients/AddN_4\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_grad/Mul\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_grad/Mul_1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1\n",
      "train/gradients/Switch_4\n",
      "train/gradients/Identity_4\n",
      "train/gradients/Shape_5\n",
      "train/gradients/zeros_4/Const\n",
      "train/gradients/zeros_4\n",
      "train/gradients/dnn/batch_normalization/cond/Switch_1_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad\n",
      "train/gradients/dnn/batch_normalization/moments/Squeeze_grad/Shape\n",
      "train/gradients/dnn/batch_normalization/moments/Squeeze_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs/s0\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs/s1\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/Sum/reduction_indices\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/Sum\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/Reshape/shape\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization/batchnorm/add_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization/cond_1/Merge_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization/cond_1/Merge_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization/cond_1/Merge_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization/cond_1/Merge_grad/tuple/control_dependency_1\n",
      "train/gradients/Switch_5\n",
      "train/gradients/Identity_5\n",
      "train/gradients/Shape_6\n",
      "train/gradients/zeros_5/Const\n",
      "train/gradients/zeros_5\n",
      "train/gradients/dnn/batch_normalization/cond_1/Switch_1_grad/cond_grad\n",
      "train/gradients/dnn/batch_normalization/moments/Squeeze_1_grad/Shape\n",
      "train/gradients/dnn/batch_normalization/moments/Squeeze_1_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Shape\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Size\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/add\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/mod\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/range/start\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/range/delta\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/range\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Fill/value\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Fill\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/DynamicStitch\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Maximum/y\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Maximum\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/floordiv\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Tile\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Shape_2\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Shape_3\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Const\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Prod\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Const_1\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Prod_1\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Maximum_1/y\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Maximum_1\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/floordiv_1\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/Cast\n",
      "train/gradients/dnn/batch_normalization/moments/variance_grad/truediv\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/scalar\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/Mul\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/sub\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/mul_1\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/Shape\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/Sum\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/Sum_1\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/Reshape_1\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/Neg\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency\n",
      "train/gradients/dnn/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Shape\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Size\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/add\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/mod\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Shape_1\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/range/start\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/range/delta\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/range\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Fill/value\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Fill\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/DynamicStitch\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Maximum/y\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Maximum\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/floordiv\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Reshape\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Tile\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Shape_2\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Shape_3\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Const\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Prod\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Const_1\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Prod_1\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Maximum_1/y\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Maximum_1\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/floordiv_1\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/Cast\n",
      "train/gradients/dnn/batch_normalization/moments/mean_grad/truediv\n",
      "train/gradients/AddN_5\n",
      "train/gradients/dnn/hidden1/BiasAdd_grad/BiasAddGrad\n",
      "train/gradients/dnn/hidden1/BiasAdd_grad/tuple/group_deps\n",
      "train/gradients/dnn/hidden1/BiasAdd_grad/tuple/control_dependency\n",
      "train/gradients/dnn/hidden1/BiasAdd_grad/tuple/control_dependency_1\n",
      "train/gradients/dnn/hidden1/MatMul_grad/MatMul\n",
      "train/gradients/dnn/hidden1/MatMul_grad/MatMul_1\n",
      "train/gradients/dnn/hidden1/MatMul_grad/tuple/group_deps\n",
      "train/gradients/dnn/hidden1/MatMul_grad/tuple/control_dependency\n",
      "train/gradients/dnn/hidden1/MatMul_grad/tuple/control_dependency_1\n",
      "train/GradientDescent/learning_rate\n",
      "train/GradientDescent/update_hidden1/kernel/ApplyGradientDescent\n",
      "train/GradientDescent/update_hidden1/bias/ApplyGradientDescent\n",
      "train/GradientDescent/update_batch_normalization/gamma/ApplyGradientDescent\n",
      "train/GradientDescent/update_batch_normalization/beta/ApplyGradientDescent\n",
      "train/GradientDescent/update_hidden2/kernel/ApplyGradientDescent\n",
      "train/GradientDescent/update_hidden2/bias/ApplyGradientDescent\n",
      "train/GradientDescent/update_batch_normalization_1/gamma/ApplyGradientDescent\n",
      "train/GradientDescent/update_batch_normalization_1/beta/ApplyGradientDescent\n",
      "train/GradientDescent/update_outputs/kernel/ApplyGradientDescent\n",
      "train/GradientDescent/update_outputs/bias/ApplyGradientDescent\n",
      "train/GradientDescent/update_batch_normalization_2/gamma/ApplyGradientDescent\n",
      "train/GradientDescent/update_batch_normalization_2/beta/ApplyGradientDescent\n",
      "train/GradientDescent\n",
      "eval/in_top_k/InTopKV2/k\n",
      "eval/in_top_k/InTopKV2\n",
      "eval/Cast\n",
      "eval/Const\n",
      "eval/Mean\n",
      "init\n",
      "save/filename/input\n",
      "save/filename\n",
      "save/Const\n",
      "save/SaveV2/tensor_names\n",
      "save/SaveV2/shape_and_slices\n",
      "save/SaveV2\n",
      "save/control_dependency\n",
      "save/RestoreV2/tensor_names\n",
      "save/RestoreV2/shape_and_slices\n",
      "save/RestoreV2\n",
      "save/Assign\n",
      "save/Assign_1\n",
      "save/Assign_2\n",
      "save/Assign_3\n",
      "save/Assign_4\n",
      "save/Assign_5\n",
      "save/Assign_6\n",
      "save/Assign_7\n",
      "save/Assign_8\n",
      "save/Assign_9\n",
      "save/Assign_10\n",
      "save/Assign_11\n",
      "save/Assign_12\n",
      "save/Assign_13\n",
      "save/Assign_14\n",
      "save/Assign_15\n",
      "save/Assign_16\n",
      "save/Assign_17\n",
      "save/restore_all\n",
      "init_1\n",
      "save_1/filename/input\n",
      "save_1/filename\n",
      "save_1/Const\n",
      "save_1/SaveV2/tensor_names\n",
      "save_1/SaveV2/shape_and_slices\n",
      "save_1/SaveV2\n",
      "save_1/control_dependency\n",
      "save_1/RestoreV2/tensor_names\n",
      "save_1/RestoreV2/shape_and_slices\n",
      "save_1/RestoreV2\n",
      "save_1/Assign\n",
      "save_1/Assign_1\n",
      "save_1/Assign_2\n",
      "save_1/Assign_3\n",
      "save_1/Assign_4\n",
      "save_1/Assign_5\n",
      "save_1/Assign_6\n",
      "save_1/Assign_7\n",
      "save_1/Assign_8\n",
      "save_1/Assign_9\n",
      "save_1/Assign_10\n",
      "save_1/Assign_11\n",
      "save_1/Assign_12\n",
      "save_1/Assign_13\n",
      "save_1/Assign_14\n",
      "save_1/Assign_15\n",
      "save_1/Assign_16\n",
      "save_1/Assign_17\n",
      "save_1/restore_all\n"
     ]
    }
   ],
   "source": [
    "for op in tf.get_default_graph().get_operations():\n",
    "    print(op.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "n_epochs = 20\n",
    "batch_size = 50\n",
    "ind = 0\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    for epoch in range(n_epochs):\n",
    "        for iteration in range(mnist_train.shape[0] // batch_size):\n",
    "            X_batch, y_batch = mnist_train.iloc[ind:ind + batch_size][mnist_valid.columns[1:]], mnist_train.iloc[ind:ind + batch_size]['label']\n",
    "            sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n",
    "        acc_train = accuracy.eval(feed_dict={X: X_batch, y: y_batch})\n",
    "        acc_val = accuracy.eval(feed_dict={X: mnist_valid[mnist_valid.columns[1:]], y: mnist_valid['label']})\n",
    "        \n",
    "        print(epoch, 'Train accuracy:', acc_train, 'Eval accuracy:', acc_val)    \n",
    "        ind += batch_size\n",
    "        \n",
    "    save_path = saver.save(sess, 'tf_logs\\my_final_model.ckpt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.Session() as sess:\n",
    "    saver.restore(sess, 'tf_logs\\my_final_model.ckpt')\n",
    "    Z = logits.eval(feed_dict={X: mnist_test[mnist_test.columns[1:]]})\n",
    "    y_test = mnist_test['label']\n",
    "    y_pred = np.argmax(Z, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 5, 1, ..., 8, 8, 6], dtype=int64)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy.eval(feed_dict={X: mnist_valid[mnist_valid.columns[1:]], y: mnist_valid['label']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8803"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sklearn\n",
    "from sklearn import *\n",
    "import matplotlib.pylab as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "china = sklearn.datasets.load_sample_image('china.jpg')\n",
    "flower = sklearn.datasets.load_sample_image('flower.jpg')\n",
    "dataset = np.array([china, flower], dtype=np.float32)\n",
    "batch_size, height, width, channels = dataset.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(china)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(flower)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "filters = np.zeros(shape=(7, 7, channels, 2), dtype=np.float32)\n",
    "filters[:, 3, :, 0] = 1\n",
    "filters[3, :, :, 1] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = tf.placeholder(tf.float32, shape=(None, height, width, channels))\n",
    "convolution = tf.nn.conv2d(X, filters, strides=[1,2,2,1], padding='SAME')\n",
    "#convolution = tf.layers.conv2d(X, filters=2, kernel_size=7, strides=[2,2], padding='SAME')\n",
    "max_pool = tf.nn.max_pool(convolution, ksize=[1,2,2,1], strides=[1,2,2,1], padding='VALID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.Session() as sess:\n",
    "    output = sess.run([max_pool], feed_dict={X: dataset})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(output[0][0, :, :, 0])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7, 7, 3, 2)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filters.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7x7 - image size, 3 - rgb, 2 - number of filters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1., 0., 0., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filters[:, :, 0, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0.],\n",
       "       [1., 1., 1., 1., 1., 1., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filters[:, :, 0, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "height = 28\n",
    "width = 28\n",
    "channels = 1\n",
    "n_inputs = height * width\n",
    "\n",
    "conv1_fmaps = 32\n",
    "conv1_ksize = 3\n",
    "conv1_stride = 1\n",
    "conv1_pad = \"SAME\"\n",
    "\n",
    "conv2_fmaps = 64\n",
    "conv2_ksize = 3\n",
    "conv2_stride = 1\n",
    "conv2_pad = \"SAME\"\n",
    "conv2_dropout_rate = 0.25\n",
    "\n",
    "pool3_fmaps = conv2_fmaps\n",
    "\n",
    "n_fc1 = 128\n",
    "fc1_dropout_rate = 0.5\n",
    "\n",
    "n_outputs = 10\n",
    "\n",
    "with tf.name_scope(\"inputs\"):\n",
    "    X = tf.placeholder(tf.float32, shape=[None, n_inputs], name=\"X\")\n",
    "    X_reshaped = tf.reshape(X, shape=[-1, height, width, channels])\n",
    "    y = tf.placeholder(tf.int32, shape=[None], name=\"y\")\n",
    "    training = tf.placeholder_with_default(False, shape=[], name='training')\n",
    "\n",
    "conv1 = tf.layers.conv2d(X_reshaped, filters=conv1_fmaps, kernel_size=conv1_ksize,\n",
    "                         strides=conv1_stride, padding=conv1_pad,\n",
    "                         activation=tf.nn.relu, name=\"conv1\")\n",
    "conv2 = tf.layers.conv2d(conv1, filters=conv2_fmaps, kernel_size=conv2_ksize,\n",
    "                         strides=conv2_stride, padding=conv2_pad,\n",
    "                         activation=tf.nn.relu, name=\"conv2\")\n",
    "\n",
    "with tf.name_scope(\"pool3\"):\n",
    "    pool3 = tf.nn.max_pool(conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=\"VALID\")\n",
    "    pool3_flat = tf.reshape(pool3, shape=[-1, pool3_fmaps * 14 * 14])\n",
    "    pool3_flat_drop = tf.layers.dropout(pool3_flat, conv2_dropout_rate, training=training)\n",
    "\n",
    "with tf.name_scope(\"fc1\"):\n",
    "    fc1 = tf.layers.dense(pool3_flat_drop, n_fc1, activation=tf.nn.relu, name=\"fc1\")\n",
    "    fc1_drop = tf.layers.dropout(fc1, fc1_dropout_rate, training=training)\n",
    "\n",
    "with tf.name_scope(\"output\"):\n",
    "    logits = tf.layers.dense(fc1_drop, n_outputs, name=\"output\")\n",
    "    Y_proba = tf.nn.softmax(logits, name=\"Y_proba\")\n",
    "\n",
    "with tf.name_scope(\"train\"):\n",
    "    xentropy = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y)\n",
    "    loss = tf.reduce_mean(xentropy)\n",
    "    optimizer = tf.train.AdamOptimizer()\n",
    "    training_op = optimizer.minimize(loss)\n",
    "\n",
    "with tf.name_scope(\"eval\"):\n",
    "    correct = tf.nn.in_top_k(logits, y, 1)\n",
    "    accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))\n",
    "\n",
    "with tf.name_scope(\"init_and_save\"):\n",
    "    init = tf.global_variables_initializer()\n",
    "    saver = tf.train.Saver()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_epochs = 20\n",
    "batch_size = 50\n",
    "#ind = 0\n",
    "\n",
    "file_writer = tf.summary.FileWriter(logdir, tf.get_default_graph())\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "saver = tf.train.Saver()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    for epoch in range(n_epochs):\n",
    "        for X_batch, y_batch in shuffle_batch(X_train, y_train, batch_size):\n",
    "            sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n",
    "        acc_batch = accuracy.eval(feed_dict={X: X_batch, y: y_batch})\n",
    "        acc_val = accuracy.eval(feed_dict={X: X_valid, y: y_valid})\n",
    "        print(epoch, \"Batch accuracy:\", acc_batch, \"Val accuracy:\", acc_val)\n",
    "        #ind += batch_size\n",
    "        \n",
    "    save_path = saver.save(sess, 'tf_logs\\my_model_final.ckpt')\n",
    "    \n",
    "file_writer.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "n_inputs = 3\n",
    "n_neurons = 5\n",
    "\n",
    "X0 = tf.placeholder(tf.float32, [None, n_inputs])\n",
    "X1 = tf.placeholder(tf.float32, [None, n_inputs])\n",
    "\n",
    "Wx = tf.Variable(tf.random_normal(shape=[n_inputs, n_neurons], dtype=tf.float32))\n",
    "Wy = tf.Variable(tf.random_normal(shape=[n_neurons, n_neurons], dtype=tf.float32))\n",
    "\n",
    "b = tf.Variable(tf.zeros([1, n_neurons], dtype=tf.float32))\n",
    "\n",
    "Y0 = tf.tanh(tf.matmul(X0, Wx) + b)\n",
    "Y1 = tf.tanh(tf.matmul(Y0, Wy) + tf.matmul(X1, Wx) + b)\n",
    "\n",
    "init = tf.global_variables_initializer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(3)])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X0.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(3)])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(3), Dimension(5)])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Wx.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(5), Dimension(5)])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Wy.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(1), Dimension(5)])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(5)])"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y0.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(5)])"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "X0_batch = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 0, 1]])\n",
    "X1_batch = np.array([[9, 8, 7], [0, 0, 0], [6, 5, 4], [3, 2, 1]])\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    Y0_val, Y1_val = sess.run([Y0, Y1], feed_dict={X0: X0_batch, X1: X1_batch})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 3)"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X0_batch.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 3)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X1_batch.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.9957954 ,  0.96355784, -0.7175532 , -0.94109106,  0.989325  ],\n",
       "       [ 1.        ,  0.9999943 ,  0.84002984,  0.9994125 ,  1.        ],\n",
       "       [ 1.        ,  1.        ,  0.9975171 ,  1.        ,  1.        ],\n",
       "       [ 1.        , -0.99998784,  1.        ,  1.        ,  1.        ]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y0_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.93141407, -0.99974084, -1.        , -1.        , -0.99964726],\n",
       "       [-0.16486286,  0.9989923 , -0.9500074 ,  0.99924374,  0.99994683],\n",
       "       [ 0.05552707, -0.89274496, -1.        , -0.99999106,  0.34080276],\n",
       "       [-0.8713358 , -0.7472361 , -0.9996865 , -0.976725  ,  0.92566806]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y1_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "n_inputs = 3\n",
    "n_neurons = 5\n",
    "\n",
    "X0 = tf.placeholder(tf.float32, [None, n_inputs])\n",
    "X1 = tf.placeholder(tf.float32, [None, n_inputs])\n",
    "\n",
    "#X0_batch = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 0, 1]])\n",
    "#X1_batch = np.array([[9, 8, 7], [0, 0, 0], [6, 5, 4], [3, 2, 1]])\n",
    "\n",
    "basic_cell = tf.nn.rnn_cell.BasicRNNCell(num_units=n_neurons)\n",
    "output_seqs, states = tf.nn.static_rnn(basic_cell, [X0, X1], dtype=tf.float32)\n",
    "\n",
    "Y0, Y1 = output_seqs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(3)])"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X0.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(3)])"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(5)])"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y0.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(5)])"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "n_inputs = 3\n",
    "n_neurons = 5\n",
    "n_steps = 2\n",
    "\n",
    "X = tf.placeholder(tf.float32, [None, n_steps, n_inputs])\n",
    "X_seqs = tf.unstack(tf.transpose(X, perm=[1, 0, 2]))\n",
    "basic_cell = tf.nn.rnn_cell.BasicRNNCell(num_units=n_neurons)\n",
    "output_seqs, states = tf.nn.static_rnn(basic_cell, X_seqs, dtype=tf.float32)\n",
    "outputs = tf.transpose(tf.stack(output_seqs), perm=[1, 0, 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "init = tf.global_variables_initializer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_batch = np.array(\n",
    "    [\n",
    "        [[0, 1, 2], [9, 8, 7]],\n",
    "        [[3, 4, 5], [0, 0, 0]],\n",
    "        [[6, 7, 8], [6, 5, 4]],\n",
    "        [[9, 0, 1], [3, 2, 1]]\n",
    "    ]\n",
    ")\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    outputs_val = outputs.eval(feed_dict={X: X_batch})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 2, 3)"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_batch.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(2), Dimension(3)])"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 2, 5)"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outputs_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(50), Dimension(3)])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(50), Dimension(None), Dimension(3)])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.transpose(X, perm=[1, 0, 2]).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<tf.Tensor 'unstack:0' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:1' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:2' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:3' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:4' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:5' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:6' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:7' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:8' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:9' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:10' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:11' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:12' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:13' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:14' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:15' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:16' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:17' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:18' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:19' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:20' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:21' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:22' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:23' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:24' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:25' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:26' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:27' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:28' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:29' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:30' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:31' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:32' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:33' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:34' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:35' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:36' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:37' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:38' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:39' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:40' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:41' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:42' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:43' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:44' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:45' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:46' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:47' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:48' shape=(?, 3) dtype=float32>,\n",
       " <tf.Tensor 'unstack:49' shape=(?, 3) dtype=float32>]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_seqs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(5)])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<tf.Tensor 'rnn/basic_rnn_cell/Tanh:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_1:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_2:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_3:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_4:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_5:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_6:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_7:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_8:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_9:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_10:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_11:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_12:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_13:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_14:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_15:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_16:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_17:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_18:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_19:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_20:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_21:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_22:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_23:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_24:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_25:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_26:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_27:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_28:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_29:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_30:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_31:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_32:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_33:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_34:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_35:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_36:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_37:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_38:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_39:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_40:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_41:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_42:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_43:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_44:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_45:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_46:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_47:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_48:0' shape=(?, 5) dtype=float32>,\n",
       " <tf.Tensor 'rnn/basic_rnn_cell/Tanh_49:0' shape=(?, 5) dtype=float32>]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output_seqs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor 'stack_1:0' shape=(50, ?, 5) dtype=float32>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.stack(output_seqs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor 'transpose_11:0' shape=(?, 50, 5) dtype=float32>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.transpose(tf.stack(output_seqs), perm=[1, 0, 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([Dimension(None), Dimension(50), Dimension(5)])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outputs.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W1224 11:31:29.521318 15448 deprecation.py:323] From <ipython-input-73-7edc70c8a1d3>:6: dynamic_rnn (from tensorflow.python.ops.rnn) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `keras.layers.RNN(cell)`, which is equivalent to this API\n"
     ]
    }
   ],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "X = tf.placeholder(tf.float32, [None, n_steps, n_inputs])\n",
    "\n",
    "basic_cell = tf.nn.rnn_cell.BasicRNNCell(num_units=n_neurons)\n",
    "outputs, states = tf.nn.dynamic_rnn(basic_cell, X, dtype=tf.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "init = tf.global_variables_initializer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_batch = np.array(\n",
    "    [\n",
    "        [[0, 1, 2], [9, 8, 7]],\n",
    "        [[3, 4, 5], [0, 0, 0]],\n",
    "        [[6, 7, 8], [6, 5, 4]],\n",
    "        [[9, 0, 1], [3, 2, 1]]\n",
    "    ]\n",
    ")\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    outputs_val = outputs.eval(feed_dict={X: X_batch})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "X = tf.placeholder(tf.float32, [None, n_steps, n_inputs])\n",
    "seq_length = tf.placeholder(tf.int32, [None])\n",
    "\n",
    "basic_cell = tf.nn.rnn_cell.BasicRNNCell(num_units=n_neurons)\n",
    "outputs, states = tf.nn.dynamic_rnn(basic_cell, X, dtype=tf.float32, sequence_length=seq_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "init = tf.global_variables_initializer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_batch = np.array(\n",
    "    [\n",
    "        [[0, 1, 2], [9, 8, 7]],\n",
    "        [[3, 4, 5], [0, 0, 0]],\n",
    "        [[6, 7, 8], [6, 5, 4]],\n",
    "        [[9, 0, 1], [3, 2, 1]]\n",
    "    ]\n",
    ")\n",
    "\n",
    "seq_length_batch = np.array([2, 1, 2, 2])\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    outputs_val, states_val = sess.run([outputs, states], feed_dict={X: X_batch, seq_length: seq_length_batch})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 2, 5)"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outputs_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 5)"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 5)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "n_steps = 28\n",
    "n_inputs = 28\n",
    "n_neurons = 150\n",
    "n_outputs = 10\n",
    "\n",
    "learning_rate = .001\n",
    "\n",
    "X = tf.placeholder(tf.float32, [None, n_steps, n_inputs])\n",
    "y = tf.placeholder(tf.int32, [None])\n",
    "\n",
    "basic_cell = tf.nn.rnn_cell.BasicRNNCell(num_units=n_neurons)\n",
    "outputs, states = tf.nn.dynamic_rnn(basic_cell, X, dtype=tf.float32)\n",
    "\n",
    "logits = tf.layers.dense(states, n_outputs)\n",
    "xentropy = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y, logits=logits)\n",
    "loss = tf.reduce_mean(xentropy)\n",
    "optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\n",
    "training_op = optimizer.minimize(loss)\n",
    "correct = tf.nn.in_top_k(logits, y, 1)\n",
    "accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))\n",
    "\n",
    "init = tf.global_variables_initializer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Разворачиваем MNIST во времени - каждая картинка, как кадр"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_index = np.random.permutation(55000)\n",
    "valid_index = np.random.permutation(5000)\n",
    "test_index = np.random.permutation(10000)\n",
    "\n",
    "mnist_train = mnist.iloc[train_index].reset_index(drop=True)\n",
    "mnist_valid = mnist.iloc[valid_index].reset_index(drop=True)\n",
    "mnist_test = mnist.iloc[test_index].reset_index(drop=True)\n",
    "\n",
    "X_train = mnist_train[mnist_train.columns[1:]].to_numpy()\n",
    "X_train = X_train.reshape((-1, n_steps, n_inputs))\n",
    "y_train = mnist_train['label'].to_numpy()\n",
    "\n",
    "X_valid = mnist_valid[mnist_valid.columns[1:]].to_numpy()\n",
    "X_valid = X_valid.reshape((-1, n_steps, n_inputs))\n",
    "y_valid = mnist_valid['label'].to_numpy()\n",
    "\n",
    "X_test = mnist_test[mnist_test.columns[1:]].to_numpy()\n",
    "X_test = X_test.reshape((-1, n_steps, n_inputs))\n",
    "y_test = mnist_test['label'].to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(784,)"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mnist_train[mnist_train.columns[1:]].to_numpy()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(55000, 28, 28)"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 Batch accuracy: 1.0 Val accuracy: 0.6812\n",
      "1 Batch accuracy: 1.0 Val accuracy: 0.6554\n",
      "2 Batch accuracy: 1.0 Val accuracy: 0.6778\n",
      "3 Batch accuracy: 1.0 Val accuracy: 0.7318\n",
      "4 Batch accuracy: 1.0 Val accuracy: 0.7506\n",
      "5 Batch accuracy: 1.0 Val accuracy: 0.7864\n",
      "6 Batch accuracy: 1.0 Val accuracy: 0.7948\n",
      "7 Batch accuracy: 1.0 Val accuracy: 0.808\n",
      "8 Batch accuracy: 1.0 Val accuracy: 0.8254\n",
      "9 Batch accuracy: 1.0 Val accuracy: 0.803\n",
      "10 Batch accuracy: 1.0 Val accuracy: 0.8342\n",
      "11 Batch accuracy: 1.0 Val accuracy: 0.8354\n",
      "12 Batch accuracy: 1.0 Val accuracy: 0.7958\n",
      "13 Batch accuracy: 1.0 Val accuracy: 0.8184\n",
      "14 Batch accuracy: 1.0 Val accuracy: 0.8404\n",
      "15 Batch accuracy: 1.0 Val accuracy: 0.8208\n",
      "16 Batch accuracy: 1.0 Val accuracy: 0.817\n",
      "17 Batch accuracy: 1.0 Val accuracy: 0.8324\n",
      "18 Batch accuracy: 1.0 Val accuracy: 0.8356\n",
      "19 Batch accuracy: 1.0 Val accuracy: 0.8624\n"
     ]
    }
   ],
   "source": [
    "n_epochs = 20\n",
    "batch_size = 150\n",
    "ind = 0\n",
    "\n",
    "file_writer = tf.summary.FileWriter(logdir, tf.get_default_graph())\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "saver = tf.train.Saver()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    for epoch in range(n_epochs):\n",
    "        for iteration in range(X_train.shape[0] // batch_size):\n",
    "            X_batch, y_batch = X_train[ind:ind + batch_size], y_train[ind:ind + batch_size]\n",
    "        #for X_batch, y_batch in shuffle_batch(X_train, y_train, batch_size):\n",
    "            sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n",
    "        acc_batch = accuracy.eval(feed_dict={X: X_batch, y: y_batch})\n",
    "        acc_val = accuracy.eval(feed_dict={X: X_valid, y: y_valid})\n",
    "        print(epoch, \"Batch accuracy:\", acc_batch, \"Val accuracy:\", acc_val)\n",
    "        ind += batch_size\n",
    "        \n",
    "    save_path = saver.save(sess, 'tf_logs\\my_model_final.ckpt')\n",
    "    \n",
    "file_writer.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "n_inputs = 28 * 28\n",
    "n_hidden1 = 500\n",
    "n_hidden2 = 500\n",
    "n_hidden3 = 20\n",
    "n_hidden4 = n_hidden2\n",
    "n_hidden5 = n_hidden1\n",
    "n_outputs = n_inputs\n",
    "learning_rage = .001\n",
    "\n",
    "initializer = tf.variance_scaling_initializer()\n",
    "my_dense_layer = partial(\n",
    "    tf.layers.dense,\n",
    "    activation=tf.nn.elu,\n",
    "    kernel_initializer=initializer\n",
    ")\n",
    "\n",
    "X = tf.placeholder(tf.float32, [None, n_inputs])\n",
    "\n",
    "hidden1 = my_dense_layer(X, n_hidden1)\n",
    "hidden2 = my_dense_layer(hidden1, n_hidden2)\n",
    "hidden3_mean = my_dense_layer(hidden2, n_hidden3, activation=None)\n",
    "hidden3_gamma = my_dense_layer(hidden2, n_hidden3, activation=None)\n",
    "noise = tf.random_normal(tf.shape(hidden3_gamma), dtype=tf.float32)\n",
    "hidden3 = hidden3_mean + tf.exp(.5 * hidden3_gamma) * noise\n",
    "hidden4 = my_dense_layer(hidden3, n_hidden4)\n",
    "hidden5 = my_dense_layer(hidden4, n_hidden5)\n",
    "logits = my_dense_layer(hidden5, n_outputs, activation=None)\n",
    "outputs = tf.sigmoid(logits)\n",
    "xentropy = tf.nn.sigmoid_cross_entropy_with_logits(labels=X, logits=logits)\n",
    "reconstruction_loss = tf.reduce_sum(xentropy)\n",
    "latent_loss = .5 * tf.reduce_sum(tf.exp(hidden3_gamma) + tf.square(hidden3_mean) - 1 - hidden3_gamma)\n",
    "loss = reconstruction_loss + latent_loss\n",
    "\n",
    "optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\n",
    "training_op = optimizer.minimize(loss)\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "saver = tf.train.Saver()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "30\n",
      "31\n",
      "32\n",
      "33\n",
      "34\n",
      "35\n",
      "36\n",
      "37\n",
      "38\n",
      "39\n",
      "40\n",
      "41\n",
      "42\n",
      "43\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n"
     ]
    }
   ],
   "source": [
    "n_digits = 60\n",
    "n_epochs = 50\n",
    "batch_size = 50\n",
    "ind = 0\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    init.run()\n",
    "    for epoch in range(n_epochs):\n",
    "        for iteration in range(mnist_train.shape[0] // batch_size):\n",
    "            X_batch, y_batch = mnist_train.iloc[ind:ind + batch_size][mnist_valid.columns[1:]], mnist_train.iloc[ind:ind + batch_size]['label']\n",
    "            sess.run(training_op, feed_dict={X: X_batch})\n",
    "        \n",
    "        condings_rnd = np.random.normal(size=[n_digits, n_hidden3])\n",
    "        outputs_val = outputs.eval(feed_dict={hidden3: condings_rnd})\n",
    "        ind += batch_size\n",
    "        print(epoch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_image(image, shape=[28, 28]):\n",
    "    plt.imshow(image.reshape(shape), cmap=\"Greys\", interpolation=\"nearest\")\n",
    "    plt.axis(\"off\")\n",
    "    \n",
    "%matplotlib inline\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['axes.labelsize'] = 14\n",
    "plt.rcParams['xtick.labelsize'] = 12\n",
    "plt.rcParams['ytick.labelsize'] = 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x3600 with 60 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,50)) # not shown in the book\n",
    "\n",
    "for iteration in range(n_digits):\n",
    "    plt.subplot(n_digits, 10, iteration+1)\n",
    "    plot_image(outputs_val[iteration])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
